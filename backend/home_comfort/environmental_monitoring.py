# -*- coding: utf-8 -*-
"""Environmental_Monitoring.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dlkpCaIO-XwUtTObpWdudQqb54WH7FXA
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load the CSV file into a DataFrame
df = pd.read_csv("Updated_Comfort_Level (1).csv")

# Show the first 5 rows
df.head()

# Show the shape (rows, columns)
print("Dataset shape:", df.shape)

# List all columns
print("\nColumns:")
print(df.columns)

# Summary statistics (mean, min, max, etc.)
df.describe()

# Check for any missing values
df.isnull().sum()

df.head()
df.columns

df['Comfort Level'].unique(), df['Simulated_Light'].unique()

df.replace({"ON": 1, "OFF": 0}, inplace=True)

df.isnull().sum()
df.dropna(inplace=True)  # remove if any nulls found

# Inputs (features)
X = df[['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy']]

# Output (target)
y = df['Comfort Level']  # This is what we want the model to predict

from sklearn.model_selection import train_test_split

# 80% training, 20% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Convert occupancy values to numeric
df['Simulated_Occupancy'].replace({'Detected': 1, 'Not Detected': 0}, inplace=True)

# Confirm it's done
df['Simulated_Occupancy'].unique()

# Redefine input and output
X = df[['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy']]
y = df['Comfort Level']

# Re-split the data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

for col in ['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy']:
    print(f"{col}: {df[col].unique()}")

# Clean 'Simulated_Occupancy' from strings
df['Simulated_Occupancy'] = df['Simulated_Occupancy'].replace({'Detected': 1, 'Not Detected': 0})
df['Simulated_Occupancy'] = pd.to_numeric(df['Simulated_Occupancy'], errors='coerce')

# Drop rows that couldn't be converted (if any)
df.dropna(subset=['Simulated_Occupancy'], inplace=True)

print(df['Simulated_Occupancy'].unique())

df.dtypes

# Convert Simulated_Occupancy values: 'Detected' ‚Üí 1, 'Not Detected' ‚Üí 0
df['Simulated_Occupancy'] = df['Simulated_Occupancy'].replace({'Detected': 1, 'Not Detected': 0})
df['Simulated_Occupancy'] = pd.to_numeric(df['Simulated_Occupancy'], errors='coerce')

# Drop any rows with invalid values
df.dropna(subset=['Simulated_Occupancy'], inplace=True)

# Convert other relevant columns to numeric too
df['Temperature'] = pd.to_numeric(df['Temperature'], errors='coerce')
df['Humidity'] = pd.to_numeric(df['Humidity'], errors='coerce')
df['Light'] = pd.to_numeric(df['Light'], errors='coerce')
df['AirQuality'] = pd.to_numeric(df['AirQuality'], errors='coerce')
df['Comfort Level'] = pd.to_numeric(df['Comfort Level'], errors='coerce')

# Drop rows with any NaNs (if anything failed to convert)
df.dropna(inplace=True)

print(df.dtypes)
print(df['Simulated_Occupancy'].unique())

print("Rows left in dataset:", df.shape[0])
df.head()

import pandas as pd

# Re-upload the CSV if needed
from google.colab import files
uploaded = files.upload()

# Load the file again
df = pd.read_csv("Updated_Comfort_Level (1).csv")

# Convert 'Detected' / 'Not Detected' in Simulated_Occupancy
df['Simulated_Occupancy'] = df['Simulated_Occupancy'].replace({'Detected': 1, 'Not Detected': 0})

# Convert relevant columns to numeric
for col in ['Temperature', 'Humidity', 'Light', 'AirQuality', 'Comfort Level', 'Simulated_Occupancy']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Drop only rows where required columns are missing
df.dropna(subset=['Temperature', 'Humidity', 'Light', 'AirQuality', 'Comfort Level', 'Simulated_Occupancy'], inplace=True)

# Check how many rows remain
print("‚úÖ Rows remaining after cleanup:", df.shape[0])
df.head()

import pandas as pd

# Correct filename (remove extra space)
df = pd.read_csv("Updated_Comfort_Level (1).csv")

# Clean 'Simulated_Occupancy'
df['Simulated_Occupancy'] = df['Simulated_Occupancy'].replace({'Detected': 1, 'Not Detected': 0})

# Convert relevant columns to numbers
columns_to_clean = ['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy', 'Comfort Level']
for col in columns_to_clean:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Drop rows with missing data
df.dropna(subset=columns_to_clean, inplace=True)

# Check how many rows remain
print("‚úÖ Rows remaining after cleanup:", df.shape[0])
df.head()

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load CSV (make sure name matches)
df = pd.read_csv("Updated_Comfort_Level (1).csv")

# Check structure
print("Before cleaning:", df.shape)

# Fix 'Simulated_Occupancy'
df['Simulated_Occupancy'] = df['Simulated_Occupancy'].replace({'Detected': 1, 'Not Detected': 0})

# Convert key columns to numeric
for col in ['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy', 'Comfort Level']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Drop only rows where required values are missing
df.dropna(subset=['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy', 'Comfort Level'], inplace=True)

# Final check
print("‚úÖ After cleaning:", df.shape)
df.head()

import pandas as pd

# Load the file again
df = pd.read_csv("Updated_Comfort_Level (1).csv")

# Show initial structure
print("üìÑ Raw dataset shape:", df.shape)
print("\nüìä First 5 rows:")
print(df.head())

# Show data types
print("\nüßæ Data types before cleaning:")
print(df.dtypes)

# See unique values in Simulated_Occupancy
print("\nüîç Unique values in 'Simulated_Occupancy':", df['Simulated_Occupancy'].unique())

import pandas as pd

# Load file
df = pd.read_csv("Updated_Comfort_Level (1).csv")

# Fix 'Light' column: convert Detected/Not Detected to 1/0
df['Light'] = df['Light'].replace({'Detected': 1, 'Not Detected': 0})

# Fix 'Comfort Level': convert Comfortable/Uncomfortable to 1/0
df['Comfort Level'] = df['Comfort Level'].replace({'Comfortable': 1, 'Uncomfortable': 0})

# Convert all relevant columns to numeric
columns_to_clean = ['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy', 'Comfort Level']
for col in columns_to_clean:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Drop rows with

# Re-convert 'Comfort Level' to numeric
df['Comfort Level'] = df['Comfort Level'].replace({'Comfortable': 1, 'Uncomfortable': 0})
df['Comfort Level'] = pd.to_numeric(df['Comfort Level'], errors='coerce')

# Remove rows where Comfort Level is still missing
df = df.dropna(subset=['Comfort Level'])

# Confirm no NaNs left
print("‚úÖ NaNs left in Comfort Level:", df['Comfort Level'].isna().sum())
print("‚úÖ Total rows after full cleanup:", df.shape[0])

# Define features and target again
X = df[['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy']]
y = df['Comfort Level']

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

print("üéâ Model trained successfully!")

new_data = pd.DataFrame([{
    'Temperature': 28,
    'Humidity': 65,
    'Light': 1,
    'AirQuality': 400,
    'Simulated_Occupancy': 1
}])

prediction = model.predict(new_data)

if prediction[0] == 1:
    print("üè† Comfort Level: COMFORTABLE ‚úÖ")
else:
    print("üè† Comfort Level: UNCOMFORTABLE ‚ùå")

import joblib

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load CSV
df = pd.read_csv("Updated_Comfort_Level (1).csv")

# Clean 'Light' column: Detected / Not Detected ‚Üí 1 / 0
df['Light'] = df['Light'].replace({'Detected': 1, 'Not Detected': 0})

# Clean 'Comfort Level': Comfortable / Uncomfortable ‚Üí 1 / 0
df['Comfort Level'] = df['Comfort Level'].replace({'Comfortable': 1, 'Uncomfortable': 0})

# Convert to numbers
for col in ['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy', 'Comfort Level']:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Remove missing rows
df.dropna(subset=['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy', 'Comfort Level'], inplace=True)

# Show final result
print("‚úÖ Data cleaned! Rows left:", df.shape[0])
df.head()

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

X = df[['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy']]
y = df['Comfort Level']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeClassifier()
model.fit(X_train, y_train)

print("üéâ Comfort model trained successfully!")

import joblib
joblib.dump(model, 'comfort_model.pkl')
print("üíæ Model saved as 'comfort_model.pkl'")

# Define input and output for light model
X_light = df[['Temperature', 'Humidity', 'Light', 'AirQuality', 'Simulated_Occupancy']]
y_light = df['Simulated_Light']

# Split and train
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

X_train_l, X_test_l, y_train_l, y_test_l = train_test_split(X_light, y_light, test_size=0.2, random_state=42)

light_model = DecisionTreeClassifier()
light_model.fit(X_train_l, y_train_l)

print("üí° Light model trained successfully!")

import joblib

# Save light model to a file
joblib.dump(light_model, 'light_model.pkl')
print("üíæ Light model saved as 'light_model.pkl'")

from google.colab import files

files.download('comfort_model.pkl')
files.download('light_model.pkl')

import requests

def control_device_from_prediction(comfort_pred, light_pred):
    esp_ip = "http://192.168.8.128"  # Your ESP32 IP address

    # Fan control
    if comfort_pred == 1:
        print(" Comfort: COMFORTABLE ‚Üí Turning Fan OFF")
        requests.get(f"{esp_ip}/fan/off")
    else:
        print(" Comfort: UNCOMFORTABLE ‚Üí Turning Fan ON")
        requests.get(f"{esp_ip}/fan/on")

    # Light control
    if light_pred == 1:
        print(" Light Prediction: Turn ON")
        requests.get(f"{esp_ip}/light/on")
    else:
        print(" Light Prediction: Turn OFF")
        requests.get(f"{esp_ip}/light/off")

import pandas as pd

from google.colab import files
uploaded = files.upload()  # Upload comfort_model.pkl and light_model.pkl

from google.colab import files
uploaded = files.upload()  # Upload comfort_model.pkl and light_model.pkl

import joblib

model = joblib.load('comfort_model.pkl')
light_model = joblib.load('light_model.pkl')

print("‚úÖ Models loaded successfully!")